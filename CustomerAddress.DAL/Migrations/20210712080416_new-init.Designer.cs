// <auto-generated />
using System;
using CustomerAddress.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CustomerAddress.DAL.Migrations
{
    [DbContext(typeof(CargoDbContext))]
    [Migration("20210712080416_new-init")]
    partial class newinit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("CustomerAddress.DAL.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Cdate")
                        .HasColumnType("datetime");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("Cuser")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Mdate")
                        .HasColumnType("datetime");

                    b.Property<int>("Muser")
                        .HasColumnType("int");

                    b.Property<int>("NeighborhoodId")
                        .HasColumnType("int");

                    b.Property<int>("StreetId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NeighborhoodId");

                    b.HasIndex("StreetId");

                    b.HasIndex("TownId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("CustomerAddress.DAL.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Cdate")
                        .HasColumnType("datetime");

                    b.Property<string>("CityName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CityRegion")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Cuser")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Mdate")
                        .HasColumnType("datetime");

                    b.Property<int>("Muser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("CustomerAddress.DAL.Entities.CompanyBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("BranchName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("Cdate")
                        .HasColumnType("datetime");

                    b.Property<int>("Cuser")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Mdate")
                        .HasColumnType("datetime");

                    b.Property<int>("Muser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("CompanyBranches");
                });

            modelBuilder.Entity("CustomerAddress.DAL.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Cdate")
                        .HasColumnType("datetime");

                    b.Property<int>("Cuser")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(155)
                        .HasColumnType("varchar(155)");

                    b.Property<string>("CustomerSurname")
                        .HasMaxLength(155)
                        .HasColumnType("varchar(155)");

                    b.Property<bool>("CustomerType")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Mail")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("Mdate")
                        .HasColumnType("datetime");

                    b.Property<int>("Muser")
                        .HasColumnType("int");

                    b.Property<string>("TelNumber")
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CustomerAddress.DAL.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Cdate")
                        .HasColumnType("datetime");

                    b.Property<int>("CompanyBranchId")
                        .HasColumnType("int");

                    b.Property<int>("Cuser")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("EmployeeSurname")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Mdate")
                        .HasColumnType("datetime");

                    b.Property<int>("Muser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CustomerAddress.DAL.Entities.Neighborhood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Cdate")
                        .HasColumnType("datetime");

                    b.Property<int>("Cuser")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Mdate")
                        .HasColumnType("datetime");

                    b.Property<int>("Muser")
                        .HasColumnType("int");

                    b.Property<string>("NeighborhoodName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TownId");

                    b.ToTable("Neighborhoods");
                });

            modelBuilder.Entity("CustomerAddress.DAL.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Cdate")
                        .HasColumnType("datetime");

                    b.Property<int>("CompanyBranchId")
                        .HasColumnType("int");

                    b.Property<int>("Cuser")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Mdate")
                        .HasColumnType("datetime");

                    b.Property<int>("Muser")
                        .HasColumnType("int");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<byte>("PostStatus")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ShippingFinishDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ShippingStartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBranchId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("CustomerAddress.DAL.Entities.Street", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Cdate")
                        .HasColumnType("datetime");

                    b.Property<int>("Cuser")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Mdate")
                        .HasColumnType("datetime");

                    b.Property<int>("Muser")
                        .HasColumnType("int");

                    b.Property<int>("NeighborhoodId")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("NeighborhoodId");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("CustomerAddress.DAL.Entities.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Cdate")
                        .HasColumnType("datetime");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("Cuser")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Mdate")
                        .HasColumnType("datetime");

                    b.Property<int>("Muser")
                        .HasColumnType("int");

                    b.Property<string>("TownName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Towns");
                });

            modelBuilder.Entity("CustomerAddress.DAL.Entities.Address", b =>
                {
                    b.HasOne("CustomerAddress.DAL.Entities.City", "CityFK")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CustomerAddress.DAL.Entities.Neighborhood", "NeighborhoodFK")
                        .WithMany("Addresses")
                        .HasForeignKey("NeighborhoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CustomerAddress.DAL.Entities.Street", "StreetFK")
                        .WithMany("Addresses")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CustomerAddress.DAL.Entities.Town", "TownFK")
                        .WithMany("Addresses")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CityFK");

                    b.Navigation("NeighborhoodFK");

                    b.Navigation("StreetFK");

                    b.Navigation("TownFK");
                });

            modelBuilder.Entity("CustomerAddress.DAL.Entities.CompanyBranch", b =>
                {
                    b.HasOne("CustomerAddress.DAL.Entities.Address", "AddressFK")
                        .WithMany("CompanyBranches")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AddressFK");
                });

            modelBuilder.Entity("CustomerAddress.DAL.Entities.Customer", b =>
                {
                    b.HasOne("CustomerAddress.DAL.Entities.Address", "AddressFK")
                        .WithMany("Customers")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AddressFK");
                });

            modelBuilder.Entity("CustomerAddress.DAL.Entities.Employee", b =>
                {
                    b.HasOne("CustomerAddress.DAL.Entities.CompanyBranch", "CompanyBranchFK")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompanyBranchFK");
                });

            modelBuilder.Entity("CustomerAddress.DAL.Entities.Neighborhood", b =>
                {
                    b.HasOne("CustomerAddress.DAL.Entities.Town", "TownFK")
                        .WithMany("Neighborhoods")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TownFK");
                });

            modelBuilder.Entity("CustomerAddress.DAL.Entities.Post", b =>
                {
                    b.HasOne("CustomerAddress.DAL.Entities.CompanyBranch", "CompanyBranchFK")
                        .WithMany("Posts")
                        .HasForeignKey("CompanyBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CustomerAddress.DAL.Entities.Employee", "EmployeeFK")
                        .WithMany("Posts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CustomerAddress.DAL.Entities.Customer", "ReceiverFK")
                        .WithMany("ReceiverPosts")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CustomerAddress.DAL.Entities.Customer", "SenderFK")
                        .WithMany("SenderPosts")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompanyBranchFK");

                    b.Navigation("EmployeeFK");

                    b.Navigation("ReceiverFK");

                    b.Navigation("SenderFK");
                });

            modelBuilder.Entity("CustomerAddress.DAL.Entities.Street", b =>
                {
                    b.HasOne("CustomerAddress.DAL.Entities.Neighborhood", "NeighborhoodFK")
                        .WithMany("Streets")
                        .HasForeignKey("NeighborhoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NeighborhoodFK");
                });

            modelBuilder.Entity("CustomerAddress.DAL.Entities.Town", b =>
                {
                    b.HasOne("CustomerAddress.DAL.Entities.City", "CityFK")
                        .WithMany("Towns")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CityFK");
                });

            modelBuilder.Entity("CustomerAddress.DAL.Entities.Address", b =>
                {
                    b.Navigation("CompanyBranches");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("CustomerAddress.DAL.Entities.City", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Towns");
                });

            modelBuilder.Entity("CustomerAddress.DAL.Entities.CompanyBranch", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("CustomerAddress.DAL.Entities.Customer", b =>
                {
                    b.Navigation("ReceiverPosts");

                    b.Navigation("SenderPosts");
                });

            modelBuilder.Entity("CustomerAddress.DAL.Entities.Employee", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("CustomerAddress.DAL.Entities.Neighborhood", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Streets");
                });

            modelBuilder.Entity("CustomerAddress.DAL.Entities.Street", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("CustomerAddress.DAL.Entities.Town", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Neighborhoods");
                });
#pragma warning restore 612, 618
        }
    }
}
